security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    
    providers:
        # Utilisé pour recharger l'utilisateur depuis la session et d'autres fonctionnalités (par ex. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                # Rediriger après la déconnexion
                target: app_login

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # Activer différentes méthodes d'authentification
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Méthode simple pour contrôler l'accès à de grandes sections de votre site
    # Note : Seul le *premier* contrôle d'accès correspondant sera utilisé
    
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/user, roles: ROLE_USER }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # Par défaut, les hashers de mots de passe sont intensifs en ressources et prennent du temps.
            # C'est important pour générer des mots de passe sécurisés. En tests cependant, les hash sécurisés
            # ne sont pas importants, gaspillent des ressources et augmentent les temps de test.
            # Ce qui suit réduit le facteur de travail aux valeurs les plus basses possibles.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Valeur la plus basse possible pour bcrypt
                time_cost: 3 # Valeur la plus basse possible pour argon
                memory_cost: 10 # Valeur la plus basse possible pour argon
